// Code generated by mockery v1.0.0. DO NOT EDIT.

package mock

import billing "github.com/paysuper/paysuper-billing-server/pkg/proto/billing"
import client "github.com/micro/go-micro/client"
import context "context"
import grpc "github.com/paysuper/paysuper-billing-server/pkg/proto/grpc"
import mock "github.com/stretchr/testify/mock"

// BillingService is an autogenerated mock type for the BillingService type
type BillingService struct {
	mock.Mock
}

// AddSystemFees provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) AddSystemFees(ctx context.Context, in *billing.AddSystemFeesRequest, opts ...client.CallOption) (*grpc.EmptyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.EmptyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billing.AddSystemFeesRequest, ...client.CallOption) *grpc.EmptyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.EmptyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billing.AddSystemFeesRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeMerchant provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ChangeMerchant(ctx context.Context, in *grpc.OnboardingRequest, opts ...client.CallOption) (*billing.Merchant, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billing.Merchant
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.OnboardingRequest, ...client.CallOption) *billing.Merchant); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.Merchant)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.OnboardingRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeMerchantData provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ChangeMerchantData(ctx context.Context, in *grpc.ChangeMerchantDataRequest, opts ...client.CallOption) (*grpc.ChangeMerchantDataResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.ChangeMerchantDataResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.ChangeMerchantDataRequest, ...client.CallOption) *grpc.ChangeMerchantDataResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ChangeMerchantDataResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.ChangeMerchantDataRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeMerchantPaymentMethod provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ChangeMerchantPaymentMethod(ctx context.Context, in *grpc.MerchantPaymentMethodRequest, opts ...client.CallOption) (*grpc.MerchantPaymentMethodResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.MerchantPaymentMethodResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.MerchantPaymentMethodRequest, ...client.CallOption) *grpc.MerchantPaymentMethodResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.MerchantPaymentMethodResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.MerchantPaymentMethodRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeMerchantStatus provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ChangeMerchantStatus(ctx context.Context, in *grpc.MerchantChangeStatusRequest, opts ...client.CallOption) (*billing.Merchant, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billing.Merchant
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.MerchantChangeStatusRequest, ...client.CallOption) *billing.Merchant); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.Merchant)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.MerchantChangeStatusRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeProject provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ChangeProject(ctx context.Context, in *billing.Project, opts ...client.CallOption) (*grpc.ChangeProjectResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.ChangeProjectResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billing.Project, ...client.CallOption) *grpc.ChangeProjectResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ChangeProjectResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billing.Project, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckProjectRequestSignature provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) CheckProjectRequestSignature(ctx context.Context, in *grpc.CheckProjectRequestSignatureRequest, opts ...client.CallOption) (*grpc.CheckProjectRequestSignatureResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.CheckProjectRequestSignatureResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.CheckProjectRequestSignatureRequest, ...client.CallOption) *grpc.CheckProjectRequestSignatureResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.CheckProjectRequestSignatureResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.CheckProjectRequestSignatureRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNotification provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) CreateNotification(ctx context.Context, in *grpc.NotificationRequest, opts ...client.CallOption) (*billing.Notification, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billing.Notification
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.NotificationRequest, ...client.CallOption) *billing.Notification); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.Notification)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.NotificationRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrUpdatePaymentMethod provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) CreateOrUpdatePaymentMethod(ctx context.Context, in *billing.PaymentMethod, opts ...client.CallOption) (*grpc.ChangePaymentMethodResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.ChangePaymentMethodResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billing.PaymentMethod, ...client.CallOption) *grpc.ChangePaymentMethodResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ChangePaymentMethodResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billing.PaymentMethod, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrUpdatePaymentMethodProductionSettings provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) CreateOrUpdatePaymentMethodProductionSettings(ctx context.Context, in *grpc.ChangePaymentMethodParamsRequest, opts ...client.CallOption) (*grpc.ChangePaymentMethodParamsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.ChangePaymentMethodParamsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.ChangePaymentMethodParamsRequest, ...client.CallOption) *grpc.ChangePaymentMethodParamsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ChangePaymentMethodParamsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.ChangePaymentMethodParamsRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrUpdateProduct provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) CreateOrUpdateProduct(ctx context.Context, in *grpc.Product, opts ...client.CallOption) (*grpc.Product, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.Product
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.Product, ...client.CallOption) *grpc.Product); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.Product, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRefund provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) CreateRefund(ctx context.Context, in *grpc.CreateRefundRequest, opts ...client.CallOption) (*grpc.CreateRefundResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.CreateRefundResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.CreateRefundRequest, ...client.CallOption) *grpc.CreateRefundResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.CreateRefundResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.CreateRefundRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateToken provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) CreateToken(ctx context.Context, in *grpc.TokenRequest, opts ...client.CallOption) (*grpc.TokenResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.TokenResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.TokenRequest, ...client.CallOption) *grpc.TokenResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.TokenResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.TokenRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePaymentMethodProductionSettings provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) DeletePaymentMethodProductionSettings(ctx context.Context, in *grpc.GetPaymentMethodProductionSettingsRequest, opts ...client.CallOption) (*grpc.ChangePaymentMethodParamsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.ChangePaymentMethodParamsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.GetPaymentMethodProductionSettingsRequest, ...client.CallOption) *grpc.ChangePaymentMethodParamsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ChangePaymentMethodParamsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.GetPaymentMethodProductionSettingsRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProduct provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) DeleteProduct(ctx context.Context, in *grpc.RequestProduct, opts ...client.CallOption) (*grpc.EmptyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.EmptyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.RequestProduct, ...client.CallOption) *grpc.EmptyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.EmptyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.RequestProduct, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProject provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) DeleteProject(ctx context.Context, in *grpc.GetProjectRequest, opts ...client.CallOption) (*grpc.ChangeProjectResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.ChangeProjectResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.GetProjectRequest, ...client.CallOption) *grpc.ChangeProjectResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ChangeProjectResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.GetProjectRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllOrders provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) FindAllOrders(ctx context.Context, in *grpc.ListOrdersRequest, opts ...client.CallOption) (*billing.OrderPaginate, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billing.OrderPaginate
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.ListOrdersRequest, ...client.CallOption) *billing.OrderPaginate); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.OrderPaginate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.ListOrdersRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByZipCode provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) FindByZipCode(ctx context.Context, in *grpc.FindByZipCodeRequest, opts ...client.CallOption) (*grpc.FindByZipCodeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.FindByZipCodeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.FindByZipCodeRequest, ...client.CallOption) *grpc.FindByZipCodeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.FindByZipCodeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.FindByZipCodeRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetActualSystemFeesList provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetActualSystemFeesList(ctx context.Context, in *grpc.EmptyRequest, opts ...client.CallOption) (*billing.SystemFeesList, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billing.SystemFeesList
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.EmptyRequest, ...client.CallOption) *billing.SystemFeesList); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.SystemFeesList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.EmptyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConvertRate provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetConvertRate(ctx context.Context, in *grpc.ConvertRateRequest, opts ...client.CallOption) (*grpc.ConvertRateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.ConvertRateResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.ConvertRateRequest, ...client.CallOption) *grpc.ConvertRateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ConvertRateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.ConvertRateRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCountriesList provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetCountriesList(ctx context.Context, in *grpc.EmptyRequest, opts ...client.CallOption) (*billing.CountriesList, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billing.CountriesList
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.EmptyRequest, ...client.CallOption) *billing.CountriesList); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.CountriesList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.EmptyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCountry provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetCountry(ctx context.Context, in *billing.GetCountryRequest, opts ...client.CallOption) (*billing.Country, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billing.Country
	if rf, ok := ret.Get(0).(func(context.Context, *billing.GetCountryRequest, ...client.CallOption) *billing.Country); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.Country)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billing.GetCountryRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCurrency provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetCurrency(ctx context.Context, in *billing.GetCurrencyRequest, opts ...client.CallOption) (*billing.Currency, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billing.Currency
	if rf, ok := ret.Get(0).(func(context.Context, *billing.GetCurrencyRequest, ...client.CallOption) *billing.Currency); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.Currency)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billing.GetCurrencyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCurrencyList provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetCurrencyList(ctx context.Context, in *grpc.EmptyRequest, opts ...client.CallOption) (*billing.CurrencyList, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billing.CurrencyList
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.EmptyRequest, ...client.CallOption) *billing.CurrencyList); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.CurrencyList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.EmptyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMerchantBy provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetMerchantBy(ctx context.Context, in *grpc.GetMerchantByRequest, opts ...client.CallOption) (*grpc.GetMerchantResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.GetMerchantResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.GetMerchantByRequest, ...client.CallOption) *grpc.GetMerchantResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.GetMerchantResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.GetMerchantByRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMerchantPaymentMethod provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetMerchantPaymentMethod(ctx context.Context, in *grpc.GetMerchantPaymentMethodRequest, opts ...client.CallOption) (*grpc.GetMerchantPaymentMethodResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.GetMerchantPaymentMethodResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.GetMerchantPaymentMethodRequest, ...client.CallOption) *grpc.GetMerchantPaymentMethodResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.GetMerchantPaymentMethodResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.GetMerchantPaymentMethodRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNotification provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetNotification(ctx context.Context, in *grpc.GetNotificationRequest, opts ...client.CallOption) (*billing.Notification, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billing.Notification
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.GetNotificationRequest, ...client.CallOption) *billing.Notification); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.Notification)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.GetNotificationRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrder provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetOrder(ctx context.Context, in *grpc.GetOrderRequest, opts ...client.CallOption) (*billing.Order, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billing.Order
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.GetOrderRequest, ...client.CallOption) *billing.Order); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.GetOrderRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaymentMethodProductionSettings provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetPaymentMethodProductionSettings(ctx context.Context, in *grpc.GetPaymentMethodProductionSettingsRequest, opts ...client.CallOption) (*billing.PaymentMethodParams, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billing.PaymentMethodParams
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.GetPaymentMethodProductionSettingsRequest, ...client.CallOption) *billing.PaymentMethodParams); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.PaymentMethodParams)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.GetPaymentMethodProductionSettingsRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPriceGroup provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetPriceGroup(ctx context.Context, in *billing.GetPriceGroupRequest, opts ...client.CallOption) (*billing.PriceGroup, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billing.PriceGroup
	if rf, ok := ret.Get(0).(func(context.Context, *billing.GetPriceGroupRequest, ...client.CallOption) *billing.PriceGroup); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.PriceGroup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billing.GetPriceGroupRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProduct provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetProduct(ctx context.Context, in *grpc.RequestProduct, opts ...client.CallOption) (*grpc.Product, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.Product
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.RequestProduct, ...client.CallOption) *grpc.Product); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.RequestProduct, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductsForOrder provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetProductsForOrder(ctx context.Context, in *grpc.GetProductsForOrderRequest, opts ...client.CallOption) (*grpc.ListProductsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.ListProductsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.GetProductsForOrderRequest, ...client.CallOption) *grpc.ListProductsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ListProductsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.GetProductsForOrderRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProject provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetProject(ctx context.Context, in *grpc.GetProjectRequest, opts ...client.CallOption) (*grpc.ChangeProjectResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.ChangeProjectResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.GetProjectRequest, ...client.CallOption) *grpc.ChangeProjectResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ChangeProjectResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.GetProjectRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRefund provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetRefund(ctx context.Context, in *grpc.GetRefundRequest, opts ...client.CallOption) (*grpc.CreateRefundResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.CreateRefundResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.GetRefundRequest, ...client.CallOption) *grpc.CreateRefundResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.CreateRefundResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.GetRefundRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSystemFeesForPayment provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) GetSystemFeesForPayment(ctx context.Context, in *billing.GetSystemFeesRequest, opts ...client.CallOption) (*billing.FeeSet, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billing.FeeSet
	if rf, ok := ret.Get(0).(func(context.Context, *billing.GetSystemFeesRequest, ...client.CallOption) *billing.FeeSet); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.FeeSet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billing.GetSystemFeesRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsOrderCanBePaying provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) IsOrderCanBePaying(ctx context.Context, in *grpc.IsOrderCanBePayingRequest, opts ...client.CallOption) (*grpc.IsOrderCanBePayingResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.IsOrderCanBePayingResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.IsOrderCanBePayingRequest, ...client.CallOption) *grpc.IsOrderCanBePayingResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.IsOrderCanBePayingResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.IsOrderCanBePayingRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMerchantPaymentMethods provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ListMerchantPaymentMethods(ctx context.Context, in *grpc.ListMerchantPaymentMethodsRequest, opts ...client.CallOption) (*grpc.ListingMerchantPaymentMethod, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.ListingMerchantPaymentMethod
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.ListMerchantPaymentMethodsRequest, ...client.CallOption) *grpc.ListingMerchantPaymentMethod); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ListingMerchantPaymentMethod)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.ListMerchantPaymentMethodsRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMerchants provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ListMerchants(ctx context.Context, in *grpc.MerchantListingRequest, opts ...client.CallOption) (*grpc.MerchantListingResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.MerchantListingResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.MerchantListingRequest, ...client.CallOption) *grpc.MerchantListingResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.MerchantListingResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.MerchantListingRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNotifications provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ListNotifications(ctx context.Context, in *grpc.ListingNotificationRequest, opts ...client.CallOption) (*grpc.Notifications, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.Notifications
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.ListingNotificationRequest, ...client.CallOption) *grpc.Notifications); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.Notifications)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.ListingNotificationRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProducts provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ListProducts(ctx context.Context, in *grpc.ListProductsRequest, opts ...client.CallOption) (*grpc.ListProductsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.ListProductsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.ListProductsRequest, ...client.CallOption) *grpc.ListProductsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ListProductsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.ListProductsRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProjects provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ListProjects(ctx context.Context, in *grpc.ListProjectsRequest, opts ...client.CallOption) (*grpc.ListProjectsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.ListProjectsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.ListProjectsRequest, ...client.CallOption) *grpc.ListProjectsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ListProjectsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.ListProjectsRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRefunds provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ListRefunds(ctx context.Context, in *grpc.ListRefundsRequest, opts ...client.CallOption) (*grpc.ListRefundsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.ListRefundsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.ListRefundsRequest, ...client.CallOption) *grpc.ListRefundsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ListRefundsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.ListRefundsRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MarkNotificationAsRead provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) MarkNotificationAsRead(ctx context.Context, in *grpc.GetNotificationRequest, opts ...client.CallOption) (*billing.Notification, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billing.Notification
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.GetNotificationRequest, ...client.CallOption) *billing.Notification); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.Notification)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.GetNotificationRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderCreateProcess provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) OrderCreateProcess(ctx context.Context, in *billing.OrderCreateRequest, opts ...client.CallOption) (*billing.Order, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billing.Order
	if rf, ok := ret.Get(0).(func(context.Context, *billing.OrderCreateRequest, ...client.CallOption) *billing.Order); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billing.OrderCreateRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentCallbackProcess provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) PaymentCallbackProcess(ctx context.Context, in *grpc.PaymentNotifyRequest, opts ...client.CallOption) (*grpc.PaymentNotifyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.PaymentNotifyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.PaymentNotifyRequest, ...client.CallOption) *grpc.PaymentNotifyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.PaymentNotifyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.PaymentNotifyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentCreateProcess provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) PaymentCreateProcess(ctx context.Context, in *grpc.PaymentCreateRequest, opts ...client.CallOption) (*grpc.PaymentCreateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.PaymentCreateResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.PaymentCreateRequest, ...client.CallOption) *grpc.PaymentCreateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.PaymentCreateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.PaymentCreateRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentFormJsonDataProcess provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) PaymentFormJsonDataProcess(ctx context.Context, in *grpc.PaymentFormJsonDataRequest, opts ...client.CallOption) (*grpc.PaymentFormJsonDataResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.PaymentFormJsonDataResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.PaymentFormJsonDataRequest, ...client.CallOption) *grpc.PaymentFormJsonDataResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.PaymentFormJsonDataResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.PaymentFormJsonDataRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentFormLanguageChanged provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) PaymentFormLanguageChanged(ctx context.Context, in *grpc.PaymentFormUserChangeLangRequest, opts ...client.CallOption) (*grpc.PaymentFormDataChangeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.PaymentFormDataChangeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.PaymentFormUserChangeLangRequest, ...client.CallOption) *grpc.PaymentFormDataChangeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.PaymentFormDataChangeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.PaymentFormUserChangeLangRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentFormPaymentAccountChanged provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) PaymentFormPaymentAccountChanged(ctx context.Context, in *grpc.PaymentFormUserChangePaymentAccountRequest, opts ...client.CallOption) (*grpc.PaymentFormDataChangeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.PaymentFormDataChangeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.PaymentFormUserChangePaymentAccountRequest, ...client.CallOption) *grpc.PaymentFormDataChangeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.PaymentFormDataChangeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.PaymentFormUserChangePaymentAccountRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessBillingAddress provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ProcessBillingAddress(ctx context.Context, in *grpc.ProcessBillingAddressRequest, opts ...client.CallOption) (*grpc.ProcessBillingAddressResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.ProcessBillingAddressResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.ProcessBillingAddressRequest, ...client.CallOption) *grpc.ProcessBillingAddressResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ProcessBillingAddressResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.ProcessBillingAddressRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessRefundCallback provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) ProcessRefundCallback(ctx context.Context, in *grpc.CallbackRequest, opts ...client.CallOption) (*grpc.PaymentNotifyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.PaymentNotifyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.CallbackRequest, ...client.CallOption) *grpc.PaymentNotifyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.PaymentNotifyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.CallbackRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetMerchantS3Agreement provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) SetMerchantS3Agreement(ctx context.Context, in *grpc.SetMerchantS3AgreementRequest, opts ...client.CallOption) (*grpc.ChangeMerchantDataResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.ChangeMerchantDataResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.SetMerchantS3AgreementRequest, ...client.CallOption) *grpc.ChangeMerchantDataResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ChangeMerchantDataResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.SetMerchantS3AgreementRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetUserNotifyNewRegion provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) SetUserNotifyNewRegion(ctx context.Context, in *grpc.SetUserNotifyRequest, opts ...client.CallOption) (*grpc.EmptyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.EmptyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.SetUserNotifyRequest, ...client.CallOption) *grpc.EmptyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.EmptyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.SetUserNotifyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetUserNotifySales provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) SetUserNotifySales(ctx context.Context, in *grpc.SetUserNotifyRequest, opts ...client.CallOption) (*grpc.EmptyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.EmptyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.SetUserNotifyRequest, ...client.CallOption) *grpc.EmptyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.EmptyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.SetUserNotifyRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCountry provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) UpdateCountry(ctx context.Context, in *billing.Country, opts ...client.CallOption) (*billing.Country, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billing.Country
	if rf, ok := ret.Get(0).(func(context.Context, *billing.Country, ...client.CallOption) *billing.Country); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.Country)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billing.Country, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMerchant provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) UpdateMerchant(ctx context.Context, in *billing.Merchant, opts ...client.CallOption) (*grpc.EmptyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.EmptyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billing.Merchant, ...client.CallOption) *grpc.EmptyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.EmptyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billing.Merchant, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrder provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) UpdateOrder(ctx context.Context, in *billing.Order, opts ...client.CallOption) (*grpc.EmptyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *grpc.EmptyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *billing.Order, ...client.CallOption) *grpc.EmptyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.EmptyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billing.Order, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePriceGroup provides a mock function with given fields: ctx, in, opts
func (_m *BillingService) UpdatePriceGroup(ctx context.Context, in *billing.PriceGroup, opts ...client.CallOption) (*billing.PriceGroup, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *billing.PriceGroup
	if rf, ok := ret.Get(0).(func(context.Context, *billing.PriceGroup, ...client.CallOption) *billing.PriceGroup); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.PriceGroup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *billing.PriceGroup, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

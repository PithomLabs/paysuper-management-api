openapi: 3.0.0
info:
  description: Pay Super Key Products api
  version: 1.0.0
  title: Pay Super key distribution
  contact:
    email: support@protocol.one
tags:
  - name: product

servers:
  - description: Master test server
    url: https://p1payapi.tst.protocol.one

paths:
  /admin/api/v1/key-products/:key_product_id/prices:
    get:
      summary: Get prices for product
      parameters:
        - name: key_product_id
          in: path
          description: "Key Product ID"
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/KeyProductPrice'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalError'

    put:
      summary: Change prices for product
      parameters:
        - name: key_product_id
          in: path
          description: "Key Product ID"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/KeyProductPrice'
      responses:
        200:
          description: OK
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalError'

  /admin/api/v1/key-products/:key_product_id/publish:
    post:
      tags:
        - product
      summary: Publishes product
      parameters:
        - name: key_product_id
          in: path
          description: "Key Product ID"
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyProduct'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalError'

  /admin/api/v1/key-products:
    get:
      tags:
        - product
      summary: "Get list of key products"
      parameters:
        - name: project_id
          in: query
          description: "Project ID"
          required: false
          schema:
            type: string
        - name: "name"
          in: query
          description: "Filter by name"
          required: false
          schema:
            type: string
        - name: "offset"
          in: query
          description: "Offset list"
          required: false
          schema:
            type: number
        - name: "limit"
          in: query
          description: "Limit list count"
          required: false
          schema:
            type: number
      responses:
        200:
          description: Return list of key products for user
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_count:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/KeyProduct'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalError'

    post:
      tags:
        - product
      summary: "Create new key product"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateKeyProduct'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyProduct'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalError'

  /admin/api/v1/key-products/:key_product_id:
    put:
      tags:
        - product
      summary: "Change product"
      parameters:
        - name: key_product_id
          in: path
          description: "Key Product ID"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateKeyProduct'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyProduct'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalError'

    get:
      tags:
        - product
      summary: "Get product by id"
      parameters:
        - name: key_product_id
          in: path
          description: "Key Product ID"
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyProduct'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalError'

  /admin/api/v1/platforms:
    get:
      tags:
        - product
      summary: "Get available platform list"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_count:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Platform'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalError:
      description: Internal Server Error
    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 409
            message: "Resource with same unique id already exists"
    UnprocessableEntity:
      description: Unprocessable Entity
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 422
            message: "Fields required: 'title, description'"
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message

    KeyPlatform:
      type: object
      properties:
        id:
          type: string
          example: gog
        name:
          type: string
          example: Good old games.com
        prices:
          type: array
          items:
            $ref: '#/components/schemas/KeyProductPrice'

    KeyProductPrice:
      type: object
      properties:
        region:
          type: string
        amount:
          type: number
          format: float
          example: 29.99
        currency:
          type: string
          example: EUR
          enum:
            - EUR
            - USD
            - RUB

    Platform:
      type: object
      properties:
        id:
          type: string
          example:
            steam
        name:
          type: string
          example:
            Steam

    UpdateKeyProduct:
      type: object
      description: Model for updating or creating key product
      properties:
        name:
          type: object
          additionalProperties:
            type: string
          description: name of product
        project_id:
          type: string
          description: Id of project
        description:
          type: object
          additionalProperties:
            type: string
          description: description of description
        long_description:
          type: object
          additionalProperties:
            type: string
          description: long description of description
        sku:
          type: string
          description: sku of product
        images:
          type: array
          items:
            type: string
        url:
          type: string
        enabled:
          type: boolean
        default_currency:
          type: string
          example: USD
        platforms:
          type: array
          items:
            $ref: '#/components/schemas/KeyPlatform'

    KeyProduct:
      type: object
      properties:
        id:
          type: string
          description: id of product
        merchant_id:
          type: string
          description: Id of merchant
        project_id:
          type: string
          description: Id of project
        name:
          type: object
          additionalProperties:
            type: string
          description: name of product
        description:
          type: object
          additionalProperties:
            type: string
          description: description of description
        long_description:
          type: object
          additionalProperties:
            type: string
          description: long description of description
        created_at:
          type: string
          format: 'date-time'
        updated_at:
          type: string
          format: 'date-time'
        sku:
          type: string
          description: sku of product
        images:
          type: array
          items:
            type: string
        url:
          type: string
        enabled:
          type: boolean
        default_currency:
          type: string
          example: USD
        platforms:
          type: array
          items:
            $ref: '#/components/schemas/KeyPlatform'
        published_at:
          description: Date and time when product has been published. May be null
          type: string
          format: 'date-time'